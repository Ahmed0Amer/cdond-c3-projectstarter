version: 2.1

commands:
  tar-gzip-install:
    description: install tar & gzip
    steps:
      - run:
          name: install tar & gzip
          command: |
            yum install -y tar && yum install -y  gzip
  awscli-install:
    description: install AWS CLI v2
    steps:
      - run:
          name: aws cli installation
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  nodejs-install:
    description: install nodejs 13
    steps:
      - run:
          name: install node js 13.x
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  ansible-installtion:
    description: intsall ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt-get update
            sudo apt install software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install ansible
  python-installation:
    description: intsall python 3.10
    steps:
      - run:
          name: python install 
          command: |
            sudo apt-get install software-properties-common
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt-get -y update
            sudo apt install -y  python3.8
          
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string 
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
       - image: circleci/node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: fornt-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical 
            npm audit fix
            npm audit fix



  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - tar-gzip-install
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:

          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    
      - run:
          name: Add back-end ip to ansible inventory
          command: |

            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: on fail event
          command: |
            echo "FAILED...log below"
            aws cloudformation describe-stack-events --output text  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            exit 1

          when: on_fail

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - ansible-installtion
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["50:86:d2:c4:15:62:8f:d4:77:6b:50:c8:1e:74:e3:a8"]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - awscli-install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            echo "Running migration"
            cd backend
            npm remove -g typeorm
            npm install 
            npm run migrations > migration_status.txt
            cat migration_status.txt

      - run:
          name: Send migration kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending" 
            fi 
      - destroy-environment 
      - revert-migrations
      
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - awscli-install
      - nodejs-install
      - restore_cache:
          keys: [forntend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030" > frontend/.evn
            echo "${API_URL}"
            cat frontend/.evn
        
      - run:
          name: deploy frontend folders
          command: |
            cd frontend
            npm run build
            ls dist -R
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations    
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - python-installation
      - awscli-install
      - ansible-installtion
      - nodejs-install
      

      - add_ssh_keys:
          fingerprints: ["b0:22:ee:2c:0f:39:95:80:1f:d6:97:62:b7:da:af:79"]

      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations  
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      # - tar-gzip-install
      - awscli-install
      - nodejs-install
      - run:
          name: Backend smoke test
          command: |
            sudo apt-get install -y tar && sudo apt-get install -y gzip 
      - run:
          name: Backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "${BACKEND_PUBLIC_IP}"
            if curl "${BACKEND_PUBLIC_IP}:3030/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Getting last version info
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value"  --output text)
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --output text)
            curl --insecure https://kvdb.io/61SZUvhbAAGHkELRK6sjK9/OLD_WORKFLOW_ID -d "${OLD_WORKFLOW_ID}"
            curl --insecure https://kvdb.io/61SZUvhbAAGHkELRK6sjK9/STACKS -d "${STACKS}"
      - run: 
          name: Update CloudFront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run: 
          name: cleaning up old stack
          command: | 
            OLD_WORKFLOW_ID=$(curl -s --insecure https://kvdb.io/61SZUvhbAAGHkELRK6sjK9/OLD_WORKFLOW_ID)
            STACKS=$(curl -s --insecure https://kvdb.io/61SZUvhbAAGHkELRK6sjK9/STACKS)
            echo ${OLD_WORKFLOW_ID}
            echo ${STACKS}
            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then 
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontends-${OLD_WORKFLOW_ID}" 
            fi

  cleanup:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - awscli-install
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              
            

            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           filters:
             branches:
               only: [master]
              
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
            requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]